[tool.semantic_release]
version_variable = ["api/main.py:__version__"]
branch = "master"
upload_to_release = true
commit_message = "{version}\n\nNew Version Release"
tag_format = "v{version}"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.branches.main]
match = "master"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = [
    "api/**",
    "assets/**",
    "!assets/recently_played_games(linear).png",
    "!assets/recently_played_games(logarithmic).png",
    "CHANGELOG.md",
    "CODE_OF_CONDUCT.md",
    "LICENSE",
    "README.md",
    "action.yml",
    "requirements.txt"
]
upload_to_vcs_release = true

[tool.semantic_release.plugins]
verify_conditions = [
    "@semantic-release/git",
    "@semantic-release/github",
    "@semantic-release/exec"
]
analyze_commits = [
    "@semantic-release/commit-analyzer"
]
generate_notes = [
    "@semantic-release/release-notes-generator"
]
prepare = [
    "@semantic-release/changelog",
    "@semantic-release/git"
]
publish = [
    "@semantic-release/github",
    "@semantic-release/exec"
]
success = [
    "@semantic-release/github"
]
fail = [
    "@semantic-release/github"
]

[tool.semantic_release.exec]
prepare_cmd = "docker build -t nicconike/steam-stats:${nextRelease.version} . && docker build -t nicconike/steam-stats:latest ."
publish_cmd = "docker push nicconike/steam-stats:${nextRelease.version} && docker tag nicconike/steam-stats:${nextRelease.version} nicconike/steam-stats:latest && docker push nicconike/steam-stats:latest"
