name: Release

on:
    workflow_call:
        inputs:
            repo_name:
                required: true
                type: string
            docker_image:
                required: true
                type: string
        secrets:
            APP_ID:
                required: true
            APP_PRIVATE_KEY:
                required: true
            DOCKER_TOKEN:
                required: true
    push:
        branches: [master]
        tags:
            - 'v*'
        paths:
            - '.github/workflows/release.yml'
            - 'api/*.py'
            - 'pyproject.toml'
            - 'Dockerfile'
            - 'requirements.txt'

permissions:
    contents: read

jobs:
    release:
        if: |
            github.actor != 'dependabot[bot]' &&
            github.actor != 'github-actions[bot]' &&
            github.actor != 'protected-auto-commits[bot]'
        name: Release
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
        permissions:
            id-token: write
            contents: write
            issues: write
            pull-requests: write
        outputs:
            released: ${{ steps.semantic.outputs.released }}
            version: ${{ steps.semantic.outputs.version }}
        steps:
          - name: Harden the runner
            uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
            with:
                egress-policy: audit

          - name: GitHub App Token
            uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
            id: app-token
            with:
                app-id: ${{ secrets.APP_ID }}
                private-key: ${{ secrets.APP_PRIVATE_KEY }}

          - name: Checkout Code
            uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            with:
                fetch-depth: 0
                token: ${{ steps.app-token.outputs.token }}

          - name: Setup Python
            uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
            with:
                python-version: '3.x'
                cache: "pip"

          - name: Cache Dependencies
            uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
            with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
                restore-keys: |
                    ${{ runner.os }}-pip-

          - name: Install Dependencies
            run: |
                python -m pip install --upgrade pip
                pip install python-semantic-release

          - name: Update to Latest Commit
            run: |
                git fetch origin
                git reset --hard origin/${{ github.ref_name }}

          - name: Semantic Release
            id: semantic
            uses: python-semantic-release/python-semantic-release@f9e152fb36cd2e590fe8c2bf85bbff08f7fc1c52 # v10.1.0
            with:
                github_token: ${{ steps.app-token.outputs.token }}
            env:
                PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring

          - name: Publish to PyPI
            if: steps.semantic.outputs.released == 'true'
            uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
            with:
                skip_existing: true

    docker:
        name: Docker
        runs-on: ubuntu-latest
        needs: release
        if: needs.release.outputs.released == 'true'
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
        permissions:
            contents: read
            attestations: write
            id-token: write
            packages: write
        steps:
          - name: Harden the runner
            uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
            with:
                egress-policy: audit

          - name: GitHub App Token
            uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
            id: app-token
            with:
                app-id: ${{ secrets.APP_ID }}
                private-key: ${{ secrets.APP_PRIVATE_KEY }}

          - name: Checkout Code
            uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            with:
                fetch-depth: 0
                token: ${{ steps.app-token.outputs.token }}

          - name: Install CoSign
            if: github.event_name != 'pull_request'
            uses: sigstore/cosign-installer@fb28c2b6339dcd94da6e4cbcbc5e888961f6f8c3 # v3.9.0
            with:
                cosign-release: 'v2.5.0'

          - name: Setup Docker Buildx
            uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

          - name: Login to Docker Hub
            uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
            with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_TOKEN }}

          - name: Login to GitHub Container Registry
            uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
            with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

          - name: Get latest Release
            id: get_latest_release
            run: echo "LATEST_RELEASE=${{ needs.release.outputs.version }}" >> $GITHUB_ENV
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          - name: Extract Docker Metadata
            id: meta
            uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
            with:
                images: |
                    ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}
                    ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
                tags: |
                    type=raw,value=master
                    type=raw,value=${{ env.LATEST_RELEASE }}

          - name: Build & Push Docker Image
            uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
            id: push
            with:
                context: .
                file: ./Dockerfile
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                platforms: linux/amd64
                cache-from: type=gha
                cache-to: type=gha,mode=max
                secrets: |
                    GITHUB_TOKEN=${{ steps.app-token.outputs.token }}

          - name: Sign the published Docker Image
            if: ${{ github.event_name != 'pull_request' }}
            env:
                TAGS: ${{ steps.meta.outputs.tags }}
                DIGEST: ${{ steps.push.outputs.digest }}
            run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

          - name: Generate Artifact Attestation
            uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
            with:
                subject-name: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
                subject-digest: ${{ steps.push.outputs.digest }}
                push-to-registry: true

          - name: Docker Scout Scan
            uses: docker/scout-action@aceeb83b88f2ae54376891227858dda7af647183 # v1.18.1
            with:
                command: quickview, cves
                image: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:master
                write-comment: true
                github-token: ${{ secrets.GITHUB_TOKEN }}
                sarif-file: docker-scout-results.sarif

          - name: Upload Scout Scan Results
            if: always()
            uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
            with:
                name: docker-scout-results
                path: docker-scout-results.sarif

    cleanup:
        runs-on: ubuntu-latest
        name: Cleanup
        needs: [release, docker]
        if: needs.release.outputs.released == 'true'
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
        permissions:
            contents: read
            packages: write
        steps:
          - name: Harden the runner
            uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
            with:
                egress-policy: audit

          - name: Checkout Repo
            uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

          - name: Login to Docker Hub
            uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
            with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_TOKEN }}

          - name: Login to GitHub Container Registry
            uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
            with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

          - name: Delete Old Docker Hub Tags
            env:
                REPO_NAME: ${{ github.event.repository.name }}
            run: |
                echo "Fetching Docker Hub tags for $REPO_NAME..."
                tags=$(curl -s -H "Authorization: Bearer ${{ secrets.DOCKER_TOKEN }}" \
                "https://hub.docker.com/v2/repositories/${{ vars.DOCKER_USERNAME }}/$REPO_NAME/tags?page_size=100" | \
                jq -r '.results[].name')

                echo "Tags found in Docker Hub:"
                echo "$tags"

                latest_tag=$(echo "$tags" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -rV | head -n 1)
                echo "Latest semantic version tag is: $latest_tag"

                for tag in $tags; do
                    if [[ "$tag" != "master" && "$tag" != "$latest_tag" ]]; then
                        echo "Deleting tag $tag from Docker Hub"
                        curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.DOCKER_TOKEN }}" \
                        "https://hub.docker.com/v2/repositories/${{ vars.DOCKER_USERNAME }}/$REPO_NAME/tags/$tag/"
                    else
                        echo "Keeping tag $tag"
                    fi
                done

          - name: Delete Old GHCR Tags
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                REPO_NAME: ${{ github.event.repository.name }}
            run: |
                REPO_NAME="${{ inputs.repo_name }}"
                echo "Fetching GHCR tags for $REPO_NAME..."
                page=1
                all_tags=()

                while true; do
                    page_tags=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                        "https://api.github.com/user/packages/container/$REPO_NAME/versions?per_page=100&page=$page" | \
                        jq -r '.[].metadata.container.tags[]')

                    if [[ -z "$page_tags" ]]; then
                        break
                    fi

                    all_tags+=($page_tags)
                    ((page++))
                done

                echo "Tags found in GHCR:"
                printf "%s\n" "${all_tags[@]}"

                latest_tag=$(printf "%s\n" "${all_tags[@]}" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -rV | head -n 1)
                echo "Latest semantic version tag is: $latest_tag"

                for tag in "${all_tags[@]}"; do
                    if [[ "$tag" != "master" && "$tag" != "$latest_tag" ]]; then
                        echo "Deleting tag $tag from GHCR"
                        version_id=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                        "https://api.github.com/user/packages/container/$REPO_NAME/versions" | \
                        jq -r ".[] | select(.metadata.container.tags[] == \"$tag\") | .id")

                        if [[ -n "$version_id" ]]; then
                        curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
                            "https://api.github.com/user/packages/container/$REPO_NAME/versions/$version_id"
                        else
                            echo "Warning: Could not find version ID for tag $tag"
                        fi
                    else
                        echo "Keeping tag $tag"
                    fi
                done
