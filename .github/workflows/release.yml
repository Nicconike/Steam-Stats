name: Release

on:
    workflow_call:
        inputs:
            repo_name:
                required: true
                type: string
            docker_image:
                required: true
                type: string
        secrets:
            APP_ID:
                required: true
            APP_PRIVATE_KEY:
                required: true
            DOCKER_TOKEN:
                required: true
    push:
        branches: [master]
        tags:
            - "v*"
        paths:
            - ".github/workflows/release.yml"
            - "api/*.py"
            - "templates/*.j2"
            - "pyproject.toml"
            - "Dockerfile"

permissions:
    contents: read

jobs:
    release:
        if: |
            github.actor != 'dependabot[bot]' &&
            github.actor != 'github-actions[bot]' &&
            github.actor != 'protected-auto-commits[bot]'
        name: Release
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
        permissions:
            id-token: write
            contents: write
        environment:
            name: pypi
            url: https://pypi.org/project/Steam-Stats/
        outputs:
            released: ${{ steps.semantic.outputs.released }}
            version: ${{ steps.semantic.outputs.version }}
            previous_version: ${{ steps.semantic.outputs.previous_version }}
        steps:
            - name: Harden the runner
              uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
              with:
                  egress-policy: audit

            - name: GitHub App Token
              uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
              id: app-token
              with:
                  app-id: ${{ secrets.APP_ID }}
                  private-key: ${{ secrets.APP_PRIVATE_KEY }}

            - name: Checkout Code
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
              with:
                  fetch-depth: 0
                  token: ${{ steps.app-token.outputs.token }}

            - name: Setup Python
              uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
              with:
                  python-version: "3.13"
                  cache: "pip"

            - name: Cache Dependencies
              uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install python-semantic-release

            - name: Update to Latest Commit
              run: |
                  git fetch origin
                  git reset --hard origin/${{ github.ref_name }}

            - name: Semantic Release
              id: semantic
              uses: python-semantic-release/python-semantic-release@4d4cb0ab842247caea1963132c242c62aab1e4d5 # v10.4.1
              with:
                  github_token: ${{ steps.app-token.outputs.token }}
                  build: true
              env:
                  PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring

            - name: Publish to GitHub Release Assets
              uses: python-semantic-release/publish-action@v10.4.1
              with:
                  github_token: ${{ steps.app-token.outputs.token }}
                  tag: ${{ steps.semantic.outputs.tag }}

            - name: Build distribution
              run: |
                  python -m pip install --upgrade build
                  python -m build

            - name: Publish to PyPI
              # if: steps.semantic.outputs.released == 'true'
              uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
              with:
                  packages-dir: dist
                  print-hash: true
                  verbose: true

    # pypi:
    #     name: PyPI
    #     runs-on: ubuntu-latest
    #     needs: release
    #     # if: needs.release.outputs.released == 'true'
    #     permissions:
    #         contents: read
    #         id-token: write
    #     environment:
    #         name: pypi
    #         url: https://pypi.org/project/Steam-Stats/
    #     steps:
    #         - name: Harden the runner
    #           uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
    #           with:
    #               egress-policy: audit

    #         - name: Build distribution
    #           run: |
    #               python -m pip install --upgrade build
    #               python -m build

    #         - name: Publish to PyPI
    #           # if: steps.semantic.outputs.released == 'true'
    #           uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
    #           with:
    #               packages-dir: dist
    #               print-hash: true
    #               verbose: true

    docker:
        name: Docker
        runs-on: ubuntu-latest
        needs: release
        # if: needs.release.outputs.released == 'true'
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
        permissions:
            contents: read
            attestations: write
            id-token: write
            packages: write
        steps:
            - name: Harden the runner
              uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
              with:
                  egress-policy: audit

            - name: GitHub App Token
              uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
              id: app-token
              with:
                  app-id: ${{ secrets.APP_ID }}
                  private-key: ${{ secrets.APP_PRIVATE_KEY }}

            - name: Checkout Code
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
              with:
                  fetch-depth: 0
                  token: ${{ steps.app-token.outputs.token }}

            - name: Install CoSign
              if: github.event_name != 'pull_request'
              uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
              with:
                  cosign-release: "v2.5.0"

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

            - name: Login to Docker Hub
              uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
              with:
                  username: ${{ vars.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Login to GitHub Container Registry
              uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker Metadata
              id: meta
              uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
              with:
                  images: |
                      ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}
                      ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
                  tags: |
                      type=raw,value=master
                      type=raw,value=v${{ needs.release.outputs.version }}

            - name: Build & Push Docker Image
              uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
              id: push
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: linux/amd64
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  secrets: |
                      GITHUB_TOKEN=${{ steps.app-token.outputs.token }}

            - name: Sign the published Docker Image
              if: ${{ github.event_name != 'pull_request' }}
              env:
                  TAGS: ${{ steps.meta.outputs.tags }}
                  DIGEST: ${{ steps.push.outputs.digest }}
              run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

            - name: Generate Artifact Attestation
              uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
              with:
                  subject-name: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  push-to-registry: true

            - name: Docker Scout Scan
              uses: docker/scout-action@f8c776824083494ab0d56b8105ba2ca85c86e4de # v1.18.2
              with:
                  command: quickview, cves
                  image: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:master
                  write-comment: true
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  sarif-file: docker-scout-results.sarif

            - name: Upload Scout Scan Results
              if: always()
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
              with:
                  name: docker-scout-results
                  path: docker-scout-results.sarif

    cleanup:
        runs-on: ubuntu-latest
        name: Cleanup
        needs: [release, docker]
        # if: needs.release.outputs.released == 'true'
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
        permissions:
            contents: read
            packages: write
        env:
            MASTER_TAG: master
            CURRENT_TAG: ${{ needs.release.outputs.version }}
            PREV_TAG: ${{ needs.release.outputs.previous_version }}
        steps:
            - name: Harden the runner
              uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
              with:
                  egress-policy: audit

            - name: Checkout Repo
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

            - name: Login to Docker Hub
              uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
              with:
                  username: ${{ vars.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Login to GitHub Container Registry
              uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Delete Old Docker Hub Tags
              env:
                  REPO_NAME: ${{ github.event.repository.name }}
                  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
                  MASTER_TAG: ${{ env.MASTER_TAG }}
                  CURRENT_TAG: ${{ env.CURRENT_TAG }}
                  PREV_TAG: ${{ env.PREV_TAG }}
              run: |
                  set -euo pipefail
                  echo "Fetching Docker Hub tags for $REPO_NAME"
                  tags_json=$(curl -s -H "Authorization: Bearer $DOCKER_TOKEN" \
                  "https://hub.docker.com/v2/repositories/${{ vars.DOCKER_USERNAME }}/$REPO_NAME/tags?page_size=100")

                  tags=$(echo "$tags_json" | jq -r '.results? // [] | .[].name')

                  if [ -z "$tags" ]; then
                      echo "No tags found or failed to fetch tags from Docker Hub"
                      exit 0
                  fi

                  echo "Tags found in Docker Hub:"
                  echo "$tags"

                  for tag in $tags; do
                    if [[ "$tag" != "$MASTER_TAG" && "$tag" != "$CURRENT_TAG" && "$tag" != "$PREV_TAG" ]]; then
                        echo "Deleting tag $tag from Docker Hub"
                        curl -s -X DELETE -H "Authorization: Bearer $DOCKER_TOKEN" \
                        "https://hub.docker.com/v2/repositories/${{ vars.DOCKER_USERNAME }}/$REPO_NAME/tags/$tag/"
                    else
                        echo "Keeping tag $tag"
                    fi
                  done

            - name: Delete Old GHCR Tags
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  REPO_NAME: ${{ github.event.repository.name }}
                  MASTER_TAG: ${{ env.MASTER_TAG }}
                  CURRENT_TAG: ${{ env.CURRENT_TAG }}
                  PREV_TAG: ${{ env.PREV_TAG }}
              run: |
                  set -euo pipefail
                  echo "Fetching GHCR tags for $REPO_NAME"
                  page=1
                  all_tags=()
                  while true; do
                      page_tags=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                          "https://api.github.com/user/packages/container/$REPO_NAME/versions?per_page=100&page=$page")

                      if echo "$json" | jq -e 'type == "array"' >/dev/null; then
                          page_tags=$(echo "$json" | jq -r '.[] | select(.metadata? and .metadata.container? and .metadata.container.tags) | .metadata.container.tags[]')
                      else
                          break
                      fi

                      if [[ -z "$page_tags" ]]; then
                          break
                      fi

                      all_tags+=($page_tags)
                      ((page++))
                  done

                  echo "Tags found in GHCR:"
                  printf "%s\n" "${all_tags[@]}"

                  for tag in "${all_tags[@]}"; do
                      if [[ "$tag" != "$MASTER_TAG" && "$tag" != "$CURRENT_TAG" && "$tag" != "$PREV_TAG" ]]; then
                        echo "Deleting tag $tag from GHCR"
                          version_id=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                          "https://api.github.com/user/packages/container/$REPO_NAME/versions" | \
                          jq -r ".[] | select(.metadata? and .metadata.container? and (.metadata.container.tags[] == \"$tag\")) | .id")

                          if [[ -n "$version_id" ]]; then
                               curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
                              "https://api.github.com/user/packages/container/$REPO_NAME/versions/$version_id"
                              echo "Deleted version $version_id ($tag)"
                          else
                              echo "Warning: Could not find version ID for tag $tag"
                          fi
                      else
                          echo "Keeping tag $tag"
                      fi
                  done
